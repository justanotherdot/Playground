#!/usr/bin/env ruby
gem 'minitest', '>= 5.0.0'
require 'minitest/autorun'
require_relative 'primes'

class PrimesTest < Minitest::Test
  # Pollard Rho tests
  def test_poll_rho_1200
    n = 1200
    d, _ = Primes.poll_rho(n)
    assert_equal 0, (n % d)
  end

  def test_poll_rho_400
    n = 400
    d, _ = Primes.poll_rho(n)
    assert_equal 0, (n % d)
  end

  def test_poll_rho_16
    d, _ = Primes.poll_rho(16)
    if d != false
      assert_equal 0, (16 % d)
    else
      assert_equal false, d
    end
  end

  def test_poll_rho_25
    d, _ = Primes.poll_rho(25)
    if d != false
      assert_equal 0, (25 % d)
    else
      assert_equal false, d
    end
  end

  # Trial Division Tests
  def test_trial_div_16
    assert_equal [2,2,2,2], Primes.trial_div(16)
  end

  def test_trial_div_25
    assert_equal [5,5], Primes.trial_div(25)
  end

  def test_trial_div_102
    assert_equal [2,3,17], Primes.trial_div(102)
  end

  def test_trial_div_293
    assert_equal [293], Primes.trial_div(293)
  end

  def test_trial_div_1200
    assert_equal [2,2,2,2,3,5,5], Primes.trial_div(1200)
  end

  def test_trial_div_1000000
    assert_equal [2,2,2,2,2,2,5,5,5,5,5,5], Primes.trial_div(1000000)
  end

  def test_trial_div_10000000
    assert_equal [2,2,2,2,2,2,2,5,5,5,5,5,5,5], Primes.trial_div(10000000)
  end

  # Modular Exponentiation Tests
  def test_mod_exp_11pow13mod53
    assert_equal 52, Primes.mod_exp(11, 13, 53)
  end

  def test_mod_exp_11pow13mod1
    assert_equal 0, Primes.mod_exp(11, 13, 1)
  end

  def test_mod_exp_11pow102mod57
    assert_equal 1, Primes.mod_exp(11, 102, 57)
  end

  # Miller-Rabin primality tests
  def test_is_prime_32452867
    assert Primes.mill_rab(32452867)
  end

  def test_is_prime_613651349
    assert Primes.mill_rab(613651349)
  end

  def test_is_prime_100000
    assert_equal false, Primes.mill_rab(100000)
  end

  def test_is_prime_858599509
    assert Primes.mill_rab(858599509)
  end

  def test_is_prime_big_num_1
    assert_equal false, Primes.mill_rab(14175189577323299783731347822349282390859023589895918592512859080591005591121)
  end

  #
  def test_is_prime_big_num_2
    assert Primes.mill_rab(94366396730334173383107353049414959521528815310548187030165936229578960209523421808912459795329035203510284576187160076386643700441216547732914250578934261891510827140267043592007225160798348913639472564715055445201512461359359488795427875530231001298552452230535485049737222714000227878890892901228389026881)
  end

  def test_is_prime_big_num_3
    assert Primes.mill_rab(138028649176899647846076023812164793645371887571371559091892986639999096471811910222267538577825033963552683101137782650479906670021895135954212738694784814783986671046107023185842481502719762055887490765764329237651328922972514308635045190654896041748716218441926626988737664133219271115413563418353821396401)
  end

  def test_is_prime_big_num_4
    assert Primes.mill_rab(123301261697053560451930527879636974557474268923771832437126939266601921428796348203611050423256894847735769138870460373141723679005090549101566289920247264982095246187318303659027201708559916949810035265951104246512008259674244307851578647894027803356820480862664695522389066327012330793517771435385653616841)
  end

  def test_is_prime_big_num_5
    assert Primes.mill_rab(119432521682023078841121052226157857003721669633106050345198988740042219728400958282159638484144822421840470442893056822510584029066504295892189315912923804894933736660559950053226576719285711831138657839435060908151231090715952576998400120335346005544083959311246562842277496260598128781581003807229557518839)
  end

  def test_is_prime_big_num_5
    assert Primes.mill_rab(132082885240291678440073580124226578272473600569147812319294626601995619845059779715619475871419551319029519794232989255381829366374647864619189704922722431776563860747714706040922215308646535910589305924065089149684429555813953571007126408164577035854428632242206880193165045777949624510896312005014225526731)
  end

  def test_is_prime_big_num_6
    assert Primes.mill_rab(153410708946188157980279532372610756837706984448408515364579602515073276538040155990230789600191915021209039203172105094957316552912585741177975853552299222501069267567888742458519569317286299134843250075228359900070009684517875782331709619287588451883575354340318132216817231993558066067063143257425853927599)
  end

  def test_is_prime_big_num_7
    assert Primes.mill_rab(103130593592068072608023213244858971741946977638988649427937324034014356815504971087381663169829571046157738503075005527471064224791270584831779395959349442093395294980019731027051356344056416276026592333932610954020105156667883269888206386119513058400355612571198438511950152690467372712488391425876725831041)
  end

  def test_is_prime_big_num_8
    assert_equal false, Primes.mill_rab(4980019731027051356344056416276026592333932610954020105156667883269888206386119513058400355612571198438511950152690467372712488391425876725831041)
  end

  # Factorization tests
  def test_factorize_bignum
    assert_equal({2=>[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 5=>[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]}, Primes.factorize(1000000000000000))
  end

  def test_factorize_782
    assert_equal({2=>[2], 23=>[23], 17=>[17]}, Primes.factorize(782))
  end

  def test_factorize_52
    assert_equal({2=>[2, 2], 13=>[13]}, Primes.factorize(52))
  end
end
